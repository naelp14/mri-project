knitr::opts_chunk$set(echo = FALSE)
library("dplyr")
library("ggplot2")
library("tidyr")
library("purrr")
library("dtwclust")
library("xgboost")
library("caTools")
library("caret")
library("pROC")
data <- read.csv("/Users/nathaniel.putera/Projects/UCPH/MRI-Project/Meeting-9/ADNIMERGE-dtw.csv")
train_xgb_model <- function(data) {
# Ensure correct levels for `cluster`
data$cluster <- factor(data$cluster, levels = c("Stable", "Mild Progression", "Moderate Progression", "Severe Progression"))
# Split data
set.seed(123)
sample_split <- sample.split(Y = data$cluster, SplitRatio = 0.7)
train_set <- subset(data, sample_split == TRUE)
test_set <- subset(data, sample_split == FALSE)
# Prepare labels and features
y_train <- as.integer(train_set$cluster) - 1
y_test <- as.integer(test_set$cluster) - 1
X_train <- train_set %>% dplyr::select(-cluster) %>% as.data.frame() %>% mutate_all(as.numeric)
X_test <- test_set %>% dplyr::select(-cluster) %>% as.data.frame() %>% mutate_all(as.numeric)
# Convert to xgb.DMatrix
xgb_train <- xgb.DMatrix(data = as.matrix(X_train), label = y_train)
xgb_test <- xgb.DMatrix(data = as.matrix(X_test), label = y_test)
# Set parameters
num_classes <- length(unique(y_train))  # Ensure correct num_class
xgb_params <- list(
booster = "gbtree",
eta = 0.01,
max_depth = 8,
gamma = 4,
subsample = 0.75,
colsample_bytree = 1,
objective = "multi:softprob",
eval_metric = "mlogloss",
num_class = num_classes
)
# Train the model
xgb_model <- xgb.train(
params = xgb_params,
data = xgb_train,
nrounds = 5000,
verbose = 1
)
# Predict and calculate AUC
pred_probs <- predict(xgb_model, newdata = xgb_test)
pred_probs <- matrix(pred_probs, ncol = num_classes, byrow = TRUE)
auc_values <- sapply(0:(num_classes - 1), function(class) {
binary_labels <- ifelse(y_test == class, 1, 0)
roc_obj <- roc(binary_labels, pred_probs[, class + 1])
auc(roc_obj)
})
names(auc_values) <- paste("AUC_Class", 0:(num_classes - 1), sep = "_")
# Return the model and AUC
return(list(model = xgb_model, auc = auc_values))
}
csf_data <- read.csv("/Users/nathaniel.putera/Projects/UCPH/MRI-Project/Meeting-9/csf_latent.csv")
csf_data$cluster <- factor(csf_data$cluster,
levels = c(0, 1, 2, 3),
labels = c("Mild Progression", "Moderate Progression", "Severe Progression","Stable"))
csf_xgb <- train_xgb_model(csf_data)
csf_importance_matrix <- xgb.importance(model = csf_xgb$model)
print(csf_importance_matrix)
xgb.plot.importance(csf_importance_matrix)
all_features <- colnames(csf_data)[colnames(csf_data) != "cluster"]
# Ensure all features are in the importance matrix
missing_features <- setdiff(all_features, csf_importance_matrix$Feature)
# Add missing features with zero importance
if (length(missing_features) > 0) {
zero_importance <- data.frame(
Feature = missing_features,
Gain = 0,
Cover = 0,
Frequency = 0,
Importance = 0
)
csf_importance_matrix <- rbind(csf_importance_matrix, zero_importance)
}
xgb.plot.importance(csf_importance_matrix)
pet_data <- read.csv("/Users/nathaniel.putera/Projects/UCPH/MRI-Project/Meeting-9/pet_latent.csv")
pet_data$cluster <- factor(pet_data$cluster,
levels = c(0, 1, 2, 3),
labels = c("Mild Progression", "Moderate Progression", "Severe Progression","Stable"))
pet_xgb <- train_xgb_model(pet_data)
pet_importance_matrix <- xgb.importance(model = pet_xgb$model)
print(pet_importance_matrix)
xgb.plot.importance(pet_importance_matrix)
all_features <- colnames(pet_data)[colnames(pet_data) != "cluster"]
# Ensure all features are in the importance matrix
missing_features <- setdiff(all_features, pet_importance_matrix$Feature)
# Add missing features with zero importance
if (length(missing_features) > 0) {
zero_importance <- data.frame(
Feature = missing_features,
Gain = 0,
Cover = 0,
Frequency = 0,
Importance = 0
)
pet_importance_matrix <- rbind(pet_importance_matrix, zero_importance)
}
xgb.plot.importance(pet_importance_matrix)
risk_data <- read.csv("/Users/nathaniel.putera/Projects/UCPH/MRI-Project/Meeting-9/risk_latent.csv")
risk_data$cluster <- factor(risk_data$cluster,
levels = c(0, 1, 2, 3),
labels = c("Mild Progression", "Moderate Progression", "Severe Progression","Stable"))
risk_xgb <- train_xgb_model(risk_data)
risk_importance_matrix <- xgb.importance(model = risk_xgb$model)
print(risk_importance_matrix)
xgb.plot.importance(risk_importance_matrix)
all_features <- colnames(risk_data)[colnames(risk_data) != "cluster"]
# Ensure all features are in the importance matrix
missing_features <- setdiff(all_features, risk_importance_matrix$Feature)
# Add missing features with zero importance
if (length(missing_features) > 0) {
zero_importance <- data.frame(
Feature = missing_features,
Gain = 0,
Cover = 0,
Frequency = 0,
Importance = 0
)
risk_importance_matrix <- rbind(risk_importance_matrix, zero_importance)
}
xgb.plot.importance(risk_importance_matrix)
mri_risk_data <- read.csv("/Users/nathaniel.putera/Projects/UCPH/MRI-Project/Meeting-9/mri_risk_latent.csv")
mri_risk_data$cluster <- factor(mri_risk_data$cluster,
levels = c(0, 1, 2, 3),
labels = c("Mild Progression", "Moderate Progression", "Severe Progression","Stable"))
mri_risk_xgb <- train_xgb_model(mri_risk_data)
mri_risk_importance_matrix <- xgb.importance(model = mri_risk_xgb$model)
print(mri_risk_importance_matrix)
xgb.plot.importance(mri_risk_importance_matrix)
